From 4cbb7de40614a2ee838cdbbeb221092a080f8720 Fri, 16 Dec 2016 12:53:30 +0100
From: Philip Van Hoof <philip@codeminded.be>
Date: Sun, 30 Nov 2014 14:56:02 +0100
Subject: [PATCH] Bugfix for GB#740920, ensure source_iri is filled in on item_move


diff --git a/src/libtracker-miner/tracker-miner-fs.c b/src/libtracker-miner/tracker-miner-fs.c
index 02b4a47..ac55d7f 100644
--- a/src/libtracker-miner/tracker-miner-fs.c
+++ b/src/libtracker-miner/tracker-miner-fs.c
@@ -1872,6 +1872,7 @@
 	GFile *new_parent;
 	const gchar *new_parent_iri;
 	TrackerDirectoryFlags source_flags, flags;
+	gchar *freeme = NULL;
 
 	uri = g_file_get_uri (file);
 	source_uri = g_file_get_uri (source_file);
@@ -1930,6 +1931,37 @@
 		tracker_thumbnailer_move_add (fs->priv->thumbnailer, source_uri,
 					      g_file_info_get_content_type (file_info),
 					      uri);
+
+	if (!source_exists || source_iri == NULL) {
+		TrackerSparqlCursor *cursor;
+		gchar *query = g_strdup_printf ("SELECT ?urn { ?urn nie:url <%s> }", source_uri);
+		GError *error = NULL;
+
+		cursor = tracker_sparql_connection_query (tracker_miner_get_connection (TRACKER_MINER(fs)),
+		                                          query, NULL, &error);
+
+		if (error != NULL) {
+			g_critical ("Could not obtain urn for %s: %s", source_uri, error->message);
+			g_error_free (error);
+			g_free (query);
+			return FALSE;
+		}
+
+		if (tracker_sparql_cursor_next (cursor, NULL, NULL)) {
+			freeme = g_strdup(tracker_sparql_cursor_get_string (cursor, 0, NULL));
+			source_iri = (const gchar *) freeme;
+		}
+
+		g_object_unref (cursor);
+		g_free (query);
+
+		if (source_iri != NULL) {
+			source_exists = TRUE;
+		} else {
+			g_warning ("No urn for %s", source_uri);
+			return TRUE;
+		}
+	}
 
 	sparql = g_string_new ("");
 
@@ -2068,6 +2100,7 @@
 
 	g_free (uri);
 	g_free (source_uri);
+	g_free (freeme);
 	g_object_unref (file_info);
 
 	return TRUE;

